// Code generated by MockGen. DO NOT EDIT.
// Source: web-app/price-client/client.go

// Package mock_price_client is a generated GoMock package.
package price_client

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPriceServiceClientI is a mock of PriceServiceClientI interface.
type MockPriceServiceClientI struct {
	ctrl     *gomock.Controller
	recorder *MockPriceServiceClientIMockRecorder
}

// MockPriceServiceClientIMockRecorder is the mock recorder for MockPriceServiceClientI.
type MockPriceServiceClientIMockRecorder struct {
	mock *MockPriceServiceClientI
}

// NewMockPriceServiceClientI creates a new mock instance.
func NewMockPriceServiceClientI(ctrl *gomock.Controller) *MockPriceServiceClientI {
	mock := &MockPriceServiceClientI{ctrl: ctrl}
	mock.recorder = &MockPriceServiceClientIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPriceServiceClientI) EXPECT() *MockPriceServiceClientIMockRecorder {
	return m.recorder
}

// GetKey mocks base method.
func (m *MockPriceServiceClientI) GetKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetKey indicates an expected call of GetKey.
func (mr *MockPriceServiceClientIMockRecorder) GetKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockPriceServiceClientI)(nil).GetKey))
}

// GetPrice mocks base method.
func (m *MockPriceServiceClientI) GetPrice() (*PriceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrice")
	ret0, _ := ret[0].(*PriceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrice indicates an expected call of GetPrice.
func (mr *MockPriceServiceClientIMockRecorder) GetPrice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrice", reflect.TypeOf((*MockPriceServiceClientI)(nil).GetPrice))
}

// HealthCheck mocks base method.
func (m *MockPriceServiceClientI) HealthCheck() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck")
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockPriceServiceClientIMockRecorder) HealthCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockPriceServiceClientI)(nil).HealthCheck))
}